<application>
  <component name="AppStorage">
    <option name="newTranslationDialogHeight" value="514" />
    <option name="newTranslationDialogWidth" value="584" />
    <option name="newTranslationDialogX" value="591" />
    <option name="newTranslationDialogY" value="316" />
    <histories>
      <item value="To allow subtypes of non-serializable classes to be serialized, the subtype may assume responsibility for saving and restoring the state of the supertype's public, protected, and (if accessible) package fields. The subtype may assume this responsibility only if the class it extends has an accessible no-arg constructor to initialize the class's state. It is an error to declare a class Serializable if this is not the case. The error will be detected at runtime." />
      <item value="Serializability of a class is enabled by the class implementing the java.io.Serializable interface. Classes that do not implement this interface will not have any of their state serialized or deserialized. All subtypes of a serializable class are themselves serializable. The serialization interface has no methods or fields and serves only to identify the semantics of being serializable." />
      <item value="Serializability of a class is enabled by the class implementing the java.io.Serializable interface. Classes that do not implement this interface will not have any of their state serialized or deserialized. All subtypes of a serializable class are themselves serializable. The serialization interface has no methods or fields and serves only to identify the semantics of being serializable. &lt;p&gt; To allow subtypes of non-serializable classes to be serialized, the subtype may assume responsibility for saving and restoring the state of the supertype's public, protected, and (if accessible) package fields. The subtype may assume this responsibility only if the class it extends has an accessible no-arg constructor to initialize the class's state. It is an error to declare a class Serializable if this is not the case. The error will be detected at runtime. &lt;p&gt; During deserialization, the fields of non-serializable classes will be initialized using the public or protected no-arg constructor of the class. A no-arg constructor must be accessible to the subclass that is serializable. The fields of serializable subclasses will be restored from the stream. &lt;p&gt; When traversing a graph, an object may be encountered that does not support the Serializable interface. In this case the NotSerializableException will be thrown and will identify the class of the non-serializable object. &lt;p&gt; Classes that require special handling during the serialization and deserialization process must implement special methods with these exact signatures: &lt;PRE&gt; private void writeObject(java.io.ObjectOutputStream out) throws IOException private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException; private void readObjectNoData() throws ObjectStreamException; &lt;PRE&gt; &lt;p&gt;The writeObject method is responsible for writing the state of the object for its particular class so that the corresponding readObject method can restore it. The default mechanism for saving the Object's fields can be invoked by calling out.defaultWriteObject. The method does not need to concern itself with the state belonging to its superclasses or subclasses. State is saved by writing the individual fields to the ObjectOutputStream using the writeObject method or by using the methods for primitive data types supported by DataOutput. &lt;p&gt;The readObject method is responsible for reading from the stream and restoring the classes fields. It may call in.defaultReadObject to invoke the default mechanism for restoring the object's non-static and non-transient fields. The defaultReadObject method uses information in the stream to assign the fields of the object saved in the stream with the correspondingly named fields in the current object. This handles the case when the class has evolved to add new fields. The method does not need to concern itself with the state belonging to its superclasses or subclasses. State is saved by writing the individual fields to the ObjectOutputStream using the writeObject method or by using the methods for primitive data types supported by DataOutput. &lt;p&gt;The readObjectNoData method is responsible for initializing the state of the object for its particular class in the event that the serialization stream does not list the given class as a superclass of the object being deserialized. This may occur in cases where the receiving party uses a different version of the deserialized instance's class than the sending party, and the receiver's version extends classes that are not extended by the sender's version. This may also occur if the serialization stream has been tampered; hence, readObjectNoData is useful for initializing deserialized objects properly despite a &quot;hostile&quot; or incomplete source stream. &lt;p&gt;Serializable classes that need to designate an alternative object to be used when writing an object to the stream should implement this special method with the exact signature: &lt;PRE&gt; ANY-ACCESS-MODIFIER Object writeReplace() throws ObjectStreamException; &lt;PRE&gt;&lt;p&gt; This writeReplace method is invoked by serialization if the method exists and it would be accessible from a method defined within the class of the object being serialized. Thus, the method can have private, protected and package-private access. Subclass access to this method follows java accessibility rules. &lt;p&gt; Classes that need to designate a replacement when an instance of it is read from the stream should implement this special method with the exact signature. &lt;PRE&gt; ANY-ACCESS-MODIFIER Object readResolve() throws ObjectStreamException; &lt;PRE&gt;&lt;p&gt; This readResolve method follows the same invocation rules and accessibility rules as writeReplace.&lt;p&gt; The serialization runtime associates with each serializable class a version number, called a serialVersionUID, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. If the receiver has loaded a class for the object that has a different serialVersionUID than that of the corresponding sender's class, then deserialization will result in an {@link InvalidClassException}. A serializable class can declare its own serialVersionUID explicitly by declaring a field named &lt;code&gt;&quot;serialVersionUID&quot;&lt;code&gt; that must be static, final, and of type &lt;code&gt;long&lt;code&gt;: &lt;PRE&gt; ANY-ACCESS-MODIFIER static final long serialVersionUID = 42L; &lt;PRE&gt; If a serializable class does not explicitly declare a serialVersionUID, then the serialization runtime will calculate a default serialVersionUID value for that class based on various aspects of the class, as described in the Java(TM) Object Serialization Specification. However, it is &lt;em&gt;strongly recommended&lt;em&gt; that all serializable classes explicitly declare serialVersionUID values, since the default serialVersionUID computation is highly sensitive to class details that may vary depending on compiler implementations, and can thus result in unexpected &lt;code&gt;InvalidClassException&lt;code&gt;s during deserialization. Therefore, to guarantee a consistent serialVersionUID value across different java compiler implementations, a serializable class must declare an explicit serialVersionUID value. It is also strongly advised that explicit serialVersionUID declarations use the &lt;code&gt;private&lt;code&gt; modifier where possible, since such declarations apply only to the immediately declaring class--serialVersionUID fields are not useful as inherited members. Array classes cannot declare an explicit serialVersionUID, so they always have the default computed value, but the requirement for matching serialVersionUID values is waived for array classes." />
      <item value="main" />
      <item value="山西" />
      <item value="123" />
      <item value="IntelliJ IDEA 2021.2.2 is available with the following fixes and updates: Fixed the Hierarchy tool window to show the usages of an interface method that has at least one implementation. [IDEA-275145] JBR 11 was updated to 11.0.11-b1460.1. Fixed the ability to use external diff tools. [IDEA-271200] Fixed the stop button so it now terminates running processes on the first attempt. [IDEA-276772] Fixed the code analysis issue causing warnings, suggestions, and errors not to disappear when resolved. [IDEA-275168] Fixed the error that would occur when trying to establish an SSH connection. [IDEA-277053]" />
      <item value="静止的" />
      <item value="studentid" />
      <item value="The internal buffer array where the data is stored. When necessary, it may be replaced by another array of a different size." />
      <item value="The maximum size of array to allocate. Some VMs reserve some header words in an array. Attempts to allocate larger arrays may result in OutOfMemoryError: Requested array size exceeds VM limit" />
      <item value="DEFAULT BUFFER SIZE" />
      <item value="Writes a line separator. The line separator string is defined by the system property &lt;tt&gt;line.separator&lt;tt&gt;, and is not necessarily a single newline ('\n') character." />
      <item value="Line separator string. This is the value of the line.separator property at the moment that the stream was created." />
      <item value="Writes text to a character-output stream, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings." />
      <item value="he number of characters actually skipped" />
      <item value="The object used to synchronize operations on this stream. For efficiency, a character-stream object may use an object other than itself to protect critical sections. A subclass should therefore use the object in this field rather than &lt;tt&gt;this&lt;tt&gt; or a synchronized method." />
      <item value="WRITE BUFFER SIZE" />
      <item value="must be &gt;= 1" />
      <item value="Temporary buffer used to hold writes of strings and single characters" />
      <item value="postal" />
      <item value="Access Denied" />
      <item value="Access Denied." />
      <item value="位置" />
      <item value="loction" />
      <item value="comments" />
      <item value="category id" />
      <item value="EXPLAIN" />
      <item value="Could not get Connection for extracting meta data; nested exception is org.springframework.jdbc.CannotGetJdbcConnectionException: Could not get JDBC Connection; nested exception is com.mysql.jdbc.exceptions.jdbc4.CommunicationsException: Communications link failure" />
      <item value="Unable to determine jdbc url from datasource" />
      <item value="Communications link failure" />
      <item value="The last packet sent successfully to the server was 286 milliseconds ago" />
      <item value="名字中包含's'的员工名和部门名" />
      <item value="Unable to find cn.shaoxiongdu.po.User with id 123457" />
      <item value="find Accessor For Method" />
      <item value="Access to DialectResolutionInfo cannot be null when 'hibernate.dialect' not" />
      <item value="头像" />
      <item value="container" />
      <item value="legend" />
      <item value="off" />
      <item value="minute" />
      <item value="The transition CSS property is a shorthand property for transition-property, transition-duration, transition-timing-function, and transition-delay. Transitions enable you to define the transition between two states of an element. Different states may be defined using pseudo-classes like :hover or :active or dynamically set using JavaScript. Syntax: &lt;single-transition&gt; &lt;single-transition&gt; = [ none | &lt;single-transition-property&gt; ] || &lt;time&gt; || &lt;easing-function&gt; || &lt;time&gt; &lt;single-transition-property&gt; = all | &lt;custom-ident&gt; &lt;easing-function&gt; = linear | &lt;cubic-bezier-timing-function&gt; | &lt;step-timing-function&gt; Supported by: Chrome 26, Chrome Android 26, Edge, Firefox 16, IE 10, Opera 12.1, Safari 9, Safari iOS" />
      <item value="base" />
      <item value="position" />
      <item value="定位position" />
      <item value="部门" />
      <item value="Returns an array containing all of the elements in this list in proper sequence (from first to last element); the runtime type of the returned array is that of the specified array. If the list fits in the specified array, it is returned therein. Otherwise, a new array is allocated with the runtime type of the specified array and the size of this list." />
      <item value="网易新闻列表" />
      <item value="体育" />
      <item value="出版社" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="147" />
        <entry key="ENGLISH" value="147" />
        <entry key="POLISH" value="2" />
        <entry key="GERMAN" value="1" />
        <entry key="FRENCH" value="1" />
        <entry key="KOREAN" value="1" />
        <entry key="CROATIAN" value="2" />
        <entry key="JAPANESE" value="3" />
        <entry key="SESOTHO" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1633680770951" />
  </component>
  <component name="Settings">
    <option name="aliTranslateSettings">
      <app-key>
        <option name="appId" value="LTAI4GJQPcATMbZXrZzoJQtT" />
      </app-key>
    </option>
    <option name="autoReplace" value="true" />
    <option name="autoSelectionMode" value="EXCLUSIVE" />
    <option name="baiduTranslateSettings">
      <app-key>
        <option name="appId" value="20210119000676009" />
      </app-key>
    </option>
    <option name="separators" value="_" />
    <option name="translateDocumentation" value="true" />
    <option name="translator" value="ALI" />
  </component>
</application>
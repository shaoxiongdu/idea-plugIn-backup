<application>
  <component name="AppStorage">
    <option name="newTranslationDialogWidth" value="598" />
    <option name="newTranslationDialogX" value="591" />
    <option name="newTranslationDialogY" value="316" />
    <histories>
      <item value="Spliterator" />
      <item value="Collection" />
      <item value="Shared empty array instance used for default sized empty instances. We distinguish this from EMPTY_ELEMENTDATA to know how much to inflate when first element is added." />
      <item value="Increases the capacity of this &lt;tt&gt;ArrayList&lt;tt&gt; instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument." />
      <item value="DEFAULTCAPACITY EMPTY ELEMENTDATA" />
      <item value="Returns an iterator over the elements in this collection. There are no guarantees concerning the order in which the elements are returned (unless this collection is an instance of some class that provides a guarantee)." />
      <item value="Returns the number of elements in this collection. If this collection contains more than &lt;tt&gt;Integer.MAX_VALUE&lt;tt&gt; elements, returns &lt;tt&gt;Integer.MAX_VALUE&lt;tt&gt;." />
      <item value="An iterator over a collection. {@code Iterator} takes the place of {@link Enumeration} in the Java Collections Framework. Iterators differ from enumerations in two ways:" />
      <item value="An iterator for lists that allows the programmer to traverse the list in either direction, modify the list during iteration, and obtain the iterator's current position in the list. A {@code ListIterator} has no current element; its &lt;I&gt;cursor position&lt;I&gt; always lies between the element that would be returned by a call to {@code previous()} and the element that would be returned by a call to {@code next()}." />
      <item value="Gregorian Calendar" />
      <item value="@param anotherDate the &lt;code&gt;Date&lt;code&gt; to be compared. @return the value &lt;code&gt;0&lt;code&gt; if the argument Date is equal to this Date; a value less than &lt;code&gt;0&lt;code&gt; if this Date is before the Date argument; and a value greater than &lt;code&gt;0&lt;code&gt; if this Date is after the Date argument." />
      <item value="reverse" />
      <item value="MEDIUM" />
      <item value="The pattern string of this formatter. This is always a non-localized pattern. May not be null. See class documentation for details." />
      <item value="TAG QUOTE ASCII CHAR" />
      <item value="format" />
      <item value="Tests if two string regions are equal. &lt;p&gt; A substring of this {@code String} object is compared to a substring of the argument other. The result is true if these substrings represent identical character sequences. The substring of this {@code String} object to be compared begins at index {@code toffset} and has length {@code len}. The substring of other to be compared begins at index {@code ooffset} and has length {@code len}. The result is {@code false} if and only if at least one of the following is true:" />
      <item value="The {@code String} class represents character strings. All string literals in Java programs, such as {@code &quot;abc&quot;}, are implemented as instances of this class. &lt;p&gt; Strings are constant; their values cannot be changed after they are created. String buffers support mutable strings. Because String objects are immutable they can be shared. For example: &lt;blockquote&gt;&lt;pre&gt; String str = &quot;abc&quot;; &lt;pre&gt;&lt;blockquote&gt;&lt;p&gt; is equivalent to: &lt;blockquote&gt;&lt;pre&gt; char data[] = {'a', 'b', 'c'}; String str = new String(data); &lt;pre&gt;&lt;blockquote&gt;&lt;p&gt; Here are some more examples of how strings can be used: &lt;blockquote&gt;&lt;pre&gt; System.out.println(&quot;abc&quot;); String cde = &quot;cde&quot;; System.out.println(&quot;abc&quot; + cde); String c = &quot;abc&quot;.substring(2,3); String d = cde.substring(1, 2); &lt;pre&gt;&lt;blockquote&gt; &lt;p&gt; The class {@code String} includes methods for examining individual characters of the sequence, for comparing strings, for searching strings, for extracting substrings, and for creating a copy of a string with all characters translated to uppercase or to lowercase. Case mapping is based on the Unicode Standard version specified by the {@link java.lang.Character Character} class. &lt;p&gt; The Java language provides special support for the string concatenation operator (&amp;nbsp;+&amp;nbsp;), and for conversion of other objects to strings. String concatenation is implemented through the {@code StringBuilder}(or {@code StringBuffer}) class and its {@code append} method. String conversions are implemented through the method {@code toString}, defined by {@code Object} and inherited by all classes in Java. For additional information on string concatenation and conversion, see Gosling, Joy, and Steele, &lt;i&gt;The Java Language Specification&lt;i&gt;. &lt;p&gt; Unless otherwise noted, passing a &lt;tt&gt;null&lt;tt&gt; argument to a constructor or method in this class will cause a {@link NullPointerException} to be thrown. &lt;p&gt;A {@code String} represents a string in the UTF-16 format in which &lt;em&gt;supplementary characters&lt;em&gt; are represented by &lt;em&gt;surrogate pairs&lt;em&gt; (see the section &lt;a href=&quot;Character.htmlunicode&quot;&gt;Unicode Character Representations&lt;a&gt; in the {@code Character} class for more information). Index values refer to {@code char} code units, so a supplementary character uses two positions in a {@code String}. &lt;p&gt;The {@code String} class provides methods for dealing with Unicode code points (i.e., characters), in addition to those for dealing with Unicode code units (i.e., {@code char} values)." />
      <item value="cache" />
      <item value="Concatenates the specified string to the end of this string. &lt;p&gt; If the length of the argument string is {@code 0}, then this {@code String} object is returned. Otherwise, a {@code String} object is returned that represents a character sequence that is the concatenation of the character sequence represented by this {@code String} object and the character sequence represented by the argument string.&lt;p&gt; Examples:" />
      <item value="Sinleton" />
      <item value="Custom Enum" />
      <item value="current" />
      <item value="Custom" />
      <item value="by zero" />
      <item value="Detal" />
      <item value="description" />
      <item value="capacity" />
      <item value="计算租金" />
      <item value="Cet" />
      <item value="Returns the current value of the running Java Virtual Machine's high-resolution time source, in nanoseconds." />
      <item value="pattern" />
      <item value="register Natives" />
      <item value="队友" />
      <item value="bound must be positive" />
      <item value="attack Able" />
      <item value="卡西奥佩娅" />
      <item value="move" />
      <item value="怪物" />
      <item value="attack Power" />
      <item value="attack" />
      <item value="租金" />
      <item value="别克" />
      <item value="Moto Vehicle" />
      <item value="calc Rent" />
      <item value="hight" />
      <item value="描述" />
      <item value="Practice" />
      <item value="extends" />
      <item value="职务" />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="49" />
        <entry key="ENGLISH" value="49" />
        <entry key="POLISH" value="1" />
        <entry key="GERMAN" value="1" />
        <entry key="CROATIAN" value="1" />
        <entry key="SESOTHO" value="1" />
      </map>
    </option>
  </component>
  <component name="Cache">
    <option name="lastTrimTime" value="1630224641739" />
  </component>
</application>